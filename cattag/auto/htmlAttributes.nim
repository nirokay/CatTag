## HTML Attributes
## ===============
##
## This module is autogenerated with a list of HTML attributes.

import std/[sequtils]
proc toSeq[T](a: seq[T]): seq[T] = a ## Override for `toSeq[T](a: varargs[T]): seq[T]`

import ../htmlXml/all

type HtmlAttribute* = string

const accesskey*: HtmlAttribute = "accesskey" ## HtmlAttribute `accesskey` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
proc setAccesskey*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `accesskey`
    element.attributes.addattr("accesskey", values.toSeq())
proc setAccesskey*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `accesskey`
    result = element
    result.attributes.addattr("accesskey", values.toSeq())

const anchor*: HtmlAttribute = "anchor" ## HtmlAttribute `anchor` Notes: [Experimental, Non-standard, Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/anchor
proc setAnchor*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `anchor`
    element.attributes.addattr("anchor", values.toSeq())
proc setAnchor*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `anchor`
    result = element
    result.attributes.addattr("anchor", values.toSeq())

const autocapitalize*: HtmlAttribute = "autocapitalize" ## HtmlAttribute `autocapitalize` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
proc setAutocapitalize*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `autocapitalize`
    element.attributes.addattr("autocapitalize", values.toSeq())
proc setAutocapitalize*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `autocapitalize`
    result = element
    result.attributes.addattr("autocapitalize", values.toSeq())

const autocorrect*: HtmlAttribute = "autocorrect" ## HtmlAttribute `autocorrect` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocorrect
proc setAutocorrect*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `autocorrect`
    element.attributes.addattr("autocorrect", values.toSeq())
proc setAutocorrect*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `autocorrect`
    result = element
    result.attributes.addattr("autocorrect", values.toSeq())

const autofocus*: HtmlAttribute = "autofocus" ## HtmlAttribute `autofocus` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
proc setAutofocus*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `autofocus`
    element.attributes.addattr("autofocus", values.toSeq())
proc setAutofocus*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `autofocus`
    result = element
    result.attributes.addattr("autofocus", values.toSeq())

const class*: HtmlAttribute = "class" ## HtmlAttribute `class` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
proc setClass*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `class`
    element.attributes.addattr("class", values.toSeq())
proc setClass*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `class`
    result = element
    result.attributes.addattr("class", values.toSeq())

const contenteditable*: HtmlAttribute = "contenteditable" ## HtmlAttribute `contenteditable` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
proc setContenteditable*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `contenteditable`
    element.attributes.addattr("contenteditable", values.toSeq())
proc setContenteditable*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `contenteditable`
    result = element
    result.attributes.addattr("contenteditable", values.toSeq())

const dir*: HtmlAttribute = "dir" ## HtmlAttribute `dir` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
proc setDir*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `dir`
    element.attributes.addattr("dir", values.toSeq())
proc setDir*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `dir`
    result = element
    result.attributes.addattr("dir", values.toSeq())

const draggable*: HtmlAttribute = "draggable" ## HtmlAttribute `draggable` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
proc setDraggable*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `draggable`
    element.attributes.addattr("draggable", values.toSeq())
proc setDraggable*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `draggable`
    result = element
    result.attributes.addattr("draggable", values.toSeq())

const enterkeyhint*: HtmlAttribute = "enterkeyhint" ## HtmlAttribute `enterkeyhint` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
proc setEnterkeyhint*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `enterkeyhint`
    element.attributes.addattr("enterkeyhint", values.toSeq())
proc setEnterkeyhint*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `enterkeyhint`
    result = element
    result.attributes.addattr("enterkeyhint", values.toSeq())

const exportparts*: HtmlAttribute = "exportparts" ## HtmlAttribute `exportparts` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/exportparts
proc setExportparts*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `exportparts`
    element.attributes.addattr("exportparts", values.toSeq())
proc setExportparts*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `exportparts`
    result = element
    result.attributes.addattr("exportparts", values.toSeq())

const hidden*: HtmlAttribute = "hidden" ## HtmlAttribute `hidden` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
proc setHidden*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `hidden`
    element.attributes.addattr("hidden", values.toSeq())
proc setHidden*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `hidden`
    result = element
    result.attributes.addattr("hidden", values.toSeq())

const id*: HtmlAttribute = "id" ## HtmlAttribute `id` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id
proc setId*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `id`
    element.attributes.addattr("id", values.toSeq())
proc setId*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `id`
    result = element
    result.attributes.addattr("id", values.toSeq())

const inert*: HtmlAttribute = "inert" ## HtmlAttribute `inert` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
proc setInert*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `inert`
    element.attributes.addattr("inert", values.toSeq())
proc setInert*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `inert`
    result = element
    result.attributes.addattr("inert", values.toSeq())

const inputmode*: HtmlAttribute = "inputmode" ## HtmlAttribute `inputmode` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
proc setInputmode*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `inputmode`
    element.attributes.addattr("inputmode", values.toSeq())
proc setInputmode*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `inputmode`
    result = element
    result.attributes.addattr("inputmode", values.toSeq())

const `is`*: HtmlAttribute = "is" ## HtmlAttribute `is` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
proc setIs*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `is`
    element.attributes.addattr("is", values.toSeq())
proc setIs*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `is`
    result = element
    result.attributes.addattr("is", values.toSeq())

const itemid*: HtmlAttribute = "itemid" ## HtmlAttribute `itemid` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
proc setItemid*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `itemid`
    element.attributes.addattr("itemid", values.toSeq())
proc setItemid*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `itemid`
    result = element
    result.attributes.addattr("itemid", values.toSeq())

const itemprop*: HtmlAttribute = "itemprop" ## HtmlAttribute `itemprop` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
proc setItemprop*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `itemprop`
    element.attributes.addattr("itemprop", values.toSeq())
proc setItemprop*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `itemprop`
    result = element
    result.attributes.addattr("itemprop", values.toSeq())

const itemref*: HtmlAttribute = "itemref" ## HtmlAttribute `itemref` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
proc setItemref*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `itemref`
    element.attributes.addattr("itemref", values.toSeq())
proc setItemref*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `itemref`
    result = element
    result.attributes.addattr("itemref", values.toSeq())

const itemscope*: HtmlAttribute = "itemscope" ## HtmlAttribute `itemscope` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
proc setItemscope*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `itemscope`
    element.attributes.addattr("itemscope", values.toSeq())
proc setItemscope*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `itemscope`
    result = element
    result.attributes.addattr("itemscope", values.toSeq())

const itemtype*: HtmlAttribute = "itemtype" ## HtmlAttribute `itemtype` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
proc setItemtype*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `itemtype`
    element.attributes.addattr("itemtype", values.toSeq())
proc setItemtype*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `itemtype`
    result = element
    result.attributes.addattr("itemtype", values.toSeq())

const lang*: HtmlAttribute = "lang" ## HtmlAttribute `lang` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
proc setLang*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `lang`
    element.attributes.addattr("lang", values.toSeq())
proc setLang*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `lang`
    result = element
    result.attributes.addattr("lang", values.toSeq())

const nonce*: HtmlAttribute = "nonce" ## HtmlAttribute `nonce` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
proc setNonce*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `nonce`
    element.attributes.addattr("nonce", values.toSeq())
proc setNonce*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `nonce`
    result = element
    result.attributes.addattr("nonce", values.toSeq())

const part*: HtmlAttribute = "part" ## HtmlAttribute `part` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
proc setPart*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `part`
    element.attributes.addattr("part", values.toSeq())
proc setPart*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `part`
    result = element
    result.attributes.addattr("part", values.toSeq())

const popover*: HtmlAttribute = "popover" ## HtmlAttribute `popover` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover
proc setPopover*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `popover`
    element.attributes.addattr("popover", values.toSeq())
proc setPopover*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `popover`
    result = element
    result.attributes.addattr("popover", values.toSeq())

const slot*: HtmlAttribute = "slot" ## HtmlAttribute `slot` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
proc setSlot*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `slot`
    element.attributes.addattr("slot", values.toSeq())
proc setSlot*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `slot`
    result = element
    result.attributes.addattr("slot", values.toSeq())

const spellcheck*: HtmlAttribute = "spellcheck" ## HtmlAttribute `spellcheck` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
proc setSpellcheck*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `spellcheck`
    element.attributes.addattr("spellcheck", values.toSeq())
proc setSpellcheck*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `spellcheck`
    result = element
    result.attributes.addattr("spellcheck", values.toSeq())

const style*: HtmlAttribute = "style" ## HtmlAttribute `style` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
proc setStyle*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `style`
    element.attributes.addattr("style", values.toSeq())
proc setStyle*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `style`
    result = element
    result.attributes.addattr("style", values.toSeq())

const tabindex*: HtmlAttribute = "tabindex" ## HtmlAttribute `tabindex` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
proc setTabindex*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `tabindex`
    element.attributes.addattr("tabindex", values.toSeq())
proc setTabindex*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `tabindex`
    result = element
    result.attributes.addattr("tabindex", values.toSeq())

const title*: HtmlAttribute = "title" ## HtmlAttribute `title` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
proc setTitle*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `title`
    element.attributes.addattr("title", values.toSeq())
proc setTitle*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `title`
    result = element
    result.attributes.addattr("title", values.toSeq())

const translate*: HtmlAttribute = "translate" ## HtmlAttribute `translate` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
proc setTranslate*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `translate`
    element.attributes.addattr("translate", values.toSeq())
proc setTranslate*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `translate`
    result = element
    result.attributes.addattr("translate", values.toSeq())

const virtualkeyboardpolicy*: HtmlAttribute = "virtualkeyboardpolicy" ## HtmlAttribute `virtualkeyboardpolicy` Notes: [Experimental, Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
proc setVirtualkeyboardpolicy*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `virtualkeyboardpolicy`
    element.attributes.addattr("virtualkeyboardpolicy", values.toSeq())
proc setVirtualkeyboardpolicy*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `virtualkeyboardpolicy`
    result = element
    result.attributes.addattr("virtualkeyboardpolicy", values.toSeq())

const writingsuggestions*: HtmlAttribute = "writingsuggestions" ## HtmlAttribute `writingsuggestions` Notes: [Global] Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/writingsuggestions
proc setWritingsuggestions*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `writingsuggestions`
    element.attributes.addattr("writingsuggestions", values.toSeq())
proc setWritingsuggestions*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `writingsuggestions`
    result = element
    result.attributes.addattr("writingsuggestions", values.toSeq())

const accept*: HtmlAttribute = "accept" ## HtmlAttribute `accept` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept
proc setAccept*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `accept`
    element.attributes.addattr("accept", values.toSeq())
proc setAccept*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `accept`
    result = element
    result.attributes.addattr("accept", values.toSeq())

const autocomplete*: HtmlAttribute = "autocomplete" ## HtmlAttribute `autocomplete` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
proc setAutocomplete*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `autocomplete`
    element.attributes.addattr("autocomplete", values.toSeq())
proc setAutocomplete*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `autocomplete`
    result = element
    result.attributes.addattr("autocomplete", values.toSeq())

const capture*: HtmlAttribute = "capture" ## HtmlAttribute `capture` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/capture
proc setCapture*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `capture`
    element.attributes.addattr("capture", values.toSeq())
proc setCapture*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `capture`
    result = element
    result.attributes.addattr("capture", values.toSeq())

const crossorigin*: HtmlAttribute = "crossorigin" ## HtmlAttribute `crossorigin` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin
proc setCrossorigin*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `crossorigin`
    element.attributes.addattr("crossorigin", values.toSeq())
proc setCrossorigin*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `crossorigin`
    result = element
    result.attributes.addattr("crossorigin", values.toSeq())

const dirname*: HtmlAttribute = "dirname" ## HtmlAttribute `dirname` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/dirname
proc setDirname*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `dirname`
    element.attributes.addattr("dirname", values.toSeq())
proc setDirname*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `dirname`
    result = element
    result.attributes.addattr("dirname", values.toSeq())

const disabled*: HtmlAttribute = "disabled" ## HtmlAttribute `disabled` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled
proc setDisabled*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `disabled`
    element.attributes.addattr("disabled", values.toSeq())
proc setDisabled*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `disabled`
    result = element
    result.attributes.addattr("disabled", values.toSeq())

const elementtiming*: HtmlAttribute = "elementtiming" ## HtmlAttribute `elementtiming` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/elementtiming
proc setElementtiming*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `elementtiming`
    element.attributes.addattr("elementtiming", values.toSeq())
proc setElementtiming*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `elementtiming`
    result = element
    result.attributes.addattr("elementtiming", values.toSeq())

const `for`*: HtmlAttribute = "for" ## HtmlAttribute `for` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/for
proc setFor*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `for`
    element.attributes.addattr("for", values.toSeq())
proc setFor*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `for`
    result = element
    result.attributes.addattr("for", values.toSeq())

const max*: HtmlAttribute = "max" ## HtmlAttribute `max` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max
proc setMax*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `max`
    element.attributes.addattr("max", values.toSeq())
proc setMax*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `max`
    result = element
    result.attributes.addattr("max", values.toSeq())

const maxlength*: HtmlAttribute = "maxlength" ## HtmlAttribute `maxlength` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength
proc setMaxlength*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `maxlength`
    element.attributes.addattr("maxlength", values.toSeq())
proc setMaxlength*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `maxlength`
    result = element
    result.attributes.addattr("maxlength", values.toSeq())

const min*: HtmlAttribute = "min" ## HtmlAttribute `min` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min
proc setMin*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `min`
    element.attributes.addattr("min", values.toSeq())
proc setMin*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `min`
    result = element
    result.attributes.addattr("min", values.toSeq())

const minlength*: HtmlAttribute = "minlength" ## HtmlAttribute `minlength` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength
proc setMinlength*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `minlength`
    element.attributes.addattr("minlength", values.toSeq())
proc setMinlength*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `minlength`
    result = element
    result.attributes.addattr("minlength", values.toSeq())

const multiple*: HtmlAttribute = "multiple" ## HtmlAttribute `multiple` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple
proc setMultiple*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `multiple`
    element.attributes.addattr("multiple", values.toSeq())
proc setMultiple*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `multiple`
    result = element
    result.attributes.addattr("multiple", values.toSeq())

const pattern*: HtmlAttribute = "pattern" ## HtmlAttribute `pattern` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern
proc setPattern*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `pattern`
    element.attributes.addattr("pattern", values.toSeq())
proc setPattern*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `pattern`
    result = element
    result.attributes.addattr("pattern", values.toSeq())

const placeholder*: HtmlAttribute = "placeholder" ## HtmlAttribute `placeholder` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/placeholder
proc setPlaceholder*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `placeholder`
    element.attributes.addattr("placeholder", values.toSeq())
proc setPlaceholder*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `placeholder`
    result = element
    result.attributes.addattr("placeholder", values.toSeq())

const readonly*: HtmlAttribute = "readonly" ## HtmlAttribute `readonly` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly
proc setReadonly*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `readonly`
    element.attributes.addattr("readonly", values.toSeq())
proc setReadonly*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `readonly`
    result = element
    result.attributes.addattr("readonly", values.toSeq())

const rel*: HtmlAttribute = "rel" ## HtmlAttribute `rel` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel
proc setRel*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `rel`
    element.attributes.addattr("rel", values.toSeq())
proc setRel*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `rel`
    result = element
    result.attributes.addattr("rel", values.toSeq())

const required*: HtmlAttribute = "required" ## HtmlAttribute `required` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required
proc setRequired*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `required`
    element.attributes.addattr("required", values.toSeq())
proc setRequired*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `required`
    result = element
    result.attributes.addattr("required", values.toSeq())

const size*: HtmlAttribute = "size" ## HtmlAttribute `size` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/size
proc setSize*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `size`
    element.attributes.addattr("size", values.toSeq())
proc setSize*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `size`
    result = element
    result.attributes.addattr("size", values.toSeq())

const step*: HtmlAttribute = "step" ## HtmlAttribute `step` Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step
proc setStep*(element: var HtmlElement, values: varargs[string]|seq[string]) =
    ## Sets the HtmlAttribute `step`
    element.attributes.addattr("step", values.toSeq())
proc setStep*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =
    ## Sets the HtmlAttribute `step`
    result = element
    result.attributes.addattr("step", values.toSeq())

