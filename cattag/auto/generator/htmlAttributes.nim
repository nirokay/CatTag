import std/[strutils, strformat]
import parser

var output: OutputFile = newOutputFile("htmlAttributes.nim")
output.lines = @[
    "## HTML Attributes",
    "## ===============",
    "##",
    "## This module is autogenerated with a list of HTML attributes.",
    "",
    "import std/[sequtils]",
    "proc toSeq[T](a: seq[T]): seq[T] = a ## Override for `toSeq[T](a: varargs[T]): seq[T]`",
    "",
    "import ../htmlXml/all",
    "",
    "type HtmlAttribute* = string",
    ""
]

let needQuoting: seq[string] = @[
    "for",
    "is"
]

proc writeOut(line: string, additionalNote: string = "") =
    let
        parts: seq[string] = block:
            var r: seq[string] = line.strip().split(" ")
            if additionalNote != "": r.add(additionalNote)
            r
        rawAttributeName: string = parts[0]
        attrQuote: string = if rawAttributeName in needQuoting: "`" else: ""

    if rawAttributeName[^1] in ['*']: return

    let
        attributeName: string = parts[0]
        noteParts: seq[string] = block:
            if parts.len() > 1: parts[1 .. ^1]
            else: @[]
        attributeNotes: string = block:
            if noteParts.len() == 0: ""
            else:
                "Notes: [" & noteParts.join(", ") & "] "
        reference: string = (
            if "Global" in attributeNotes: "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/"
            else: "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/"
        ) & rawAttributeName

    output.lines &= @[
        &"const {attrQuote}{attributeName}{attrQuote}*: HtmlAttribute = \"{rawAttributeName}\" ## HtmlAttribute `{rawAttributeName}` {attributeNotes}Reference: {reference}",
        &"proc set{rawAttributeName.capitalizeAscii()}*(element: var HtmlElement, values: varargs[string]|seq[string]) =",
        &"    ## Sets the HtmlAttribute `{rawAttributeName}`",
        &"    element.attributes.addattr(\"{rawAttributeName}\", values.toSeq())",
        &"proc set{rawAttributeName.capitalizeAscii()}*(element: HtmlElement, values: varargs[string]|seq[string]): HtmlElement =",
        &"    ## Sets the HtmlAttribute `{rawAttributeName}`",
        &"    result = element",
        &"    result.attributes.addattr(\"{rawAttributeName}\", values.toSeq())",
        ""
    ]

for fileLine in parseFileLines("html-attributes-global.txt"):
    writeOut(fileLine, "Global")
for fileLine in parseFileLines("html-attributes.txt"):
    writeOut(fileLine)

output.lines.add("")
output.writeFile()
