import std/[strutils, strformat, parsecsv]
import parser

const skipAttributes: seq[string] = @[
    "style"
]

var output: OutputFile = newOutputFile("htmlAttributes.nim")
output.lines = @[
    "## HTML Attributes",
    "## ===============",
    "##",
    "## This module is autogenerated with a list of HTML attributes.",
    "",
    "import std/[sequtils]",
    "proc toSeq[T](a: seq[T]): seq[T] = a ## Override for `toSeq[T](a: varargs[T]): seq[T]`",
    "",
    "import ../htmlXml/all",
    "",
    "type HtmlAttribute* {.borrow.} = distinct string",
    ""
]

let needQuoting: seq[string] = @[
    "as",
    "defer",
    "for",
    "is",
    "method",
    "type"
]

proc writeOut(rawAttributeString, elements, description: string) =
    let
        rawAttribute: string = rawAttributeString.split(" ")[0]
        notes: seq[string] = block:
            let parts: seq[string] = rawAttributeString.split(" ")
            if parts.len() == 1: @[]
            else: parts[1 .. ^1]
    if rawAttribute.endsWith("*"): return
    if rawAttribute in skipAttributes: return
    let
        attribute: string = block:
            var r: seq[string] = rawAttribute.split("-")
            for i, part in r:
                if i == 0: continue
                r[i] = part.capitalizeAscii()
            r.join("")
        attrQuote: string = if rawAttribute in needQuoting: "`" else: ""
        reference: string = "https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes"
        procName: string = "set" & attribute.capitalizeAscii()
        deprecationNotice: string = if "Deprecated" notin notes: "" else: " {.deprecated: \"This tag is deprecated\".}"

    output.lines &= @[
        "",
        &"const {attrQuote}{attribute}{attrQuote}*{deprecationNotice}: HtmlAttribute = HtmlAttribute \"{rawAttribute}\" ## HtmlAttribute `{rawAttribute}` Reference: {reference}",
        &"proc {procName}*(element: var HtmlElement, values: seq[string]) =",
        &"    ## Sets the HtmlAttribute `{rawAttribute}`",
        &"    element.attributes.add(attr(\"{rawAttribute}\", values))",
        &"proc {procName}*(element: HtmlElement, values: seq[string]): HtmlElement =",
        &"    ## Sets the HtmlAttribute `{rawAttribute}`",
        &"    result = element",
        &"    result.{procName}(values)",
        "",
        &"proc {procName}*(element: var HtmlElement, values: varargs[string]) =",
        &"    ## Sets the HtmlAttribute `{attribute}`",
        &"    element.{procName}(values.toSeq())",
        &"proc {procName}*(element: HtmlElement, values: varargs[string]): HtmlElement =",
        &"    ## Sets the HtmlAttribute `{attribute}`",
        &"    result = element.{procName}(values.toSeq())",
        ""
    ]


var p: CsvParser
p.open("./resources/html-attributes.csv")
p.readHeaderRow()
while p.readRow():
    var
        attribute: string
        elements: string
        description: string
    for column in items(p.headers):
        let entry: string = p.rowEntry(column)
        case column:
        of "Attribute Name": attribute = entry
        of "Elements": elements = entry
        of "Description": description = elements
        else:
            raise ValueError.newException("Unknown column '" & column & "'.")
    writeOut(attribute, elements, description)

output.lines.add("")
output.writeFile()
