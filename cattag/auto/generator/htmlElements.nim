import std/[strutils, strformat]
import ../../htmlXml/rules
import parser

const templateVoidProcs: string = """
proc SELECTED_TAG*(): HtmlElement =
    ## Constructs new element
    ## REFERENCE
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG")
proc SELECTED_TAG*(attributes: seq[Attribute]): HtmlElement =
    ## Constructs new element
    ## REFERENCE
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", attributes: attributes)
"""
const templateChildAcceptingProcs: string = """
proc SELECTED_TAG*(attributes: seq[Attribute], children: seq[HtmlElement]): HtmlElement =
    ## Constructs new element
    ## REFERENCE
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", attributes: attributes, children: children)
proc SELECTED_TAG*(attributes: seq[Attribute], child: HtmlElement, children: varargs[HtmlElement]): HtmlElement =
    ## Constructs new element
    ## REFERENCE
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", attributes: attributes, children: @[child] & children.toSeq())

proc SELECTED_TAG*(children: seq[HtmlElement]): HtmlElement =
    ## Constructs new element
    ## REFERENCE
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", children: children)
proc SELECTED_TAG*(child: HtmlElement, children: varargs[HtmlElement]): HtmlElement =
    ## Constructs new element
    ## REFERENCE
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", children: @[child] & children.toSeq())

proc SELECTED_TAG*(attributes: seq[Attribute], content: seq[string]): HtmlElement =
    ## Constructs new element
    ## REFERENCE
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", attributes: attributes, children: @[rawHtmlText(content)])
proc SELECTED_TAG*(attributes: seq[Attribute], content: string, moreContent: varargs[string]): HtmlElement =
    ## Constructs new element
    ## REFERENCE
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", attributes: attributes, children: @[rawHtmlText(@[content] & moreContent.toSeq())])
"""
#[
proc PROC_NAME*(content: seq[string]): HtmlElement =
    ## Constructs new element
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", children: @[rawHtmlText(content)])
proc PROC_NAME*(content: string, moreContent: varargs[string]): HtmlElement =
    ## Constructs new element
    result = HtmlElement(elementType: typeElement, tag: "SELECTED_TAG", children: @[rawHtmlText(@[content] & moreContent.toSeq())])
]#

proc newGeneralConstructorProcs(tag: string, reference: string): string =
    proc modify(input: string): string =
        input.strip()
            .replace("SELECTED_TAG", tag)
            .replace("REFERENCE", reference)

    result = templateVoidProcs.modify()
    if tag.replace("`", "") notin htmlVoidElementTags:
        result &= "\n" & templateChildAcceptingProcs.modify()

let needQuoting: seq[string] = @[
    "div",
    "object",
    "template",
    "var"
]

var output: OutputFile = newOutputFile("htmlElements.nim")
output.lines = @[
    "## HTML Elements",
    "## =============",
    "##",
    "## This module is autogenerated with a list of HTML elements.",
    "",
    "import std/[sequtils]",
    "import ../htmlXml/[types, procs]",
    "",
    "type HtmlTag* = string",
    ""
]

for fileLine in parseFileLines("html-elements.txt"):
    let
        splitString: seq[string] = fileLine.split(" ")
        rawTag: string = splitString[0][1 .. ^2] # Remove brackets
        quote: string = if rawTag notin needQuoting: "" else: "`"
        quotedTag: string = quote & rawTag & quote
        reference: string = &"Reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/{rawTag}"

    block `String constant`:
        # String constant, useful for sugar declarations:
        # ```nim
        # let element: HtmlElement = p[
        #     rawHtmlText("hello world")
        # ]
        # ```
        break
        let
            components: seq[string] = if splitString.len() == 1: @[] else: splitString[1 .. ^1]
            additionalInformation: string = block:
                if components.len() == 0: ""
                else: "Notes: [" & components.join(", ") & "] "
            deprecationNotice: string = block:
                if "Deprecated" notin components: ""
                else:
                    " {.deprecated: \"Deprecated in newer HTML versions\".}"
            documentation: string = &"HtmlTag `{rawTag}` {additionalInformation}{reference}"

        let line: string = &"const {quotedTag}*{deprecationNotice}: HtmlTag = \"{rawTag}\" ## {documentation}"
        output.lines.add(line)

    block `Constructor procs`:
        let procsLines: string = newGeneralConstructorProcs(quotedTag, reference)
        output.lines.add("\n" & procsLines & "\n\n")


output.lines.add("")
output.writeFile()
