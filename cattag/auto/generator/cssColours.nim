import std/[strutils, strformat]
import parser

var output: OutputFile = newOutputFile("cssColours.nim")
output.lines = @[
    "## CSS Colours",
    "## ===========",
    "##",
    "## This module is autogenerated with a list of CSS colours.",
    "",
    "from ../css/cssTypes import CssColor",
    "",
    "proc newCssColor*[T](repr: T): CssColor =",
    "    ## Creates new `CssColor`",
    "    result = CssColor(repr: $repr)",
    "",
    "proc newCssColour*[T](repr: T): CssColor =",
    "    ## Creates new `CssColor`",
    "    result = newCssColor(repr)",
    "",
    "const"
]

proc transFormLineParts(colour: string, components: seq[string]) =
    var
        description: string = if components.len() == 0: "" else: components[0]
        deprecation: string = if components.len() == 2: components[1] else: ""

    var line: string = &"{colour}*: CssColor = newCssColor(\"{colour}\") ## {description}"
    #[
    if deprecation != "":
        line.add(
            replace(
                &"\n{deprecation}* [.deprecated:\"use `{colour}` instead\".]: CssColor = CssColor(repr: \"{colour}\") ## {description}",
                "[.", "{."
            ).replace(".]", ".}")
        )
    ]#
    output.lines.add line.indent(4)

for line in parseFileLines("css-colours.txt"):
    let parts: seq[string] = line.split(" 	")
    transFormLineParts(parts[0],
        if parts.len() <= 1: @[]
        else: parts[1 .. ^1]
    )

output.lines.add ""
output.writeFile()
