import std/[strutils, strformat]
import parser

const needsQuotes: seq[string] = @[]

var output: OutputFile = newOutputFile("cssProperties.nim")
output.lines = @[
    "## CSS Properties",
    "## ==============",
    "##",
    "## This module is autogenerated with a list of CSS properties.",
    "",
    "type CssProperty* {.borrow.} = distinct string",
    "",
    "proc `$`*(property: CssProperty): string = string property",
    "",
    "const"
]

proc toCodeRepr(raw: string): string =
    var nextIsCapital: bool = false
    for i, c in raw:
        let thisIsCapital: bool = nextIsCapital
        nextIsCapital = false
        # Special case for special first char stuff:
        if i == 0:
            var quitNow: bool = true
            case c:
                of '-':
                    nextIsCapital = false # Beginning with '-' -> should not be capitalised
                of '@':
                    result.add(
                        if thisIsCapital: "At"
                        else: "at"
                    )
                    nextIsCapital = true
                else:
                    quitNow = false
            if quitNow: continue

        # Normal behaviour:
        if c == '-':
            # Dash:
            nextIsCapital = true
            continue
        # Alphanumeric:
        let current: string = if thisIsCapital: toUpper($c) else: $c
        result.add current

for line in parseFileLines("css-properties-mdn.txt"):
    let parts: seq[string] = line.strip().split(" ")
    if parts.len() == 0: continue
    if "*" in parts[0]: continue

    let
        rawProperty: string = parts[0]
        codeProperty: string = block:
            var r: string = rawProperty.toCodeRepr()
            if r in needsQuotes: r = "`" & r & "`"
            r
        components: seq[string] = block:
            if parts.len() == 1: @[]
            else: parts[1 .. ^1]

    # Convert to string:
    let
        deprecationNotice: string = block:
            if "Deprecated" in components:
                " {.deprecated: \"This CSS property is deprecated.\".}"
            else: ""
        reference: string = "Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/" & rawProperty
        notes: string = block:
            if components.len() == 0: ""
            else: "Notes: [" & components.join(", ") & "] "

    output.lines.add(&"    {codeProperty}*{deprecationNotice}: CssProperty = CssProperty \"{rawProperty}\" ## CssProperty `{rawProperty}` {notes}{reference}")

output.lines.add("")
output.writeFile()
